diff --git a/node_modules/react-native-modalize/lib/index.js b/node_modules/react-native-modalize/lib/index.js
index 28e86cd..cc61907 100644
--- a/node_modules/react-native-modalize/lib/index.js
+++ b/node_modules/react-native-modalize/lib/index.js
@@ -1,4 +1,5 @@
 "use strict";
+let pulled = false
 var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
     if (k2 === undefined) k2 = k;
     Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
@@ -37,6 +38,18 @@ const invariant_1 = require("./utils/invariant");
 const compose_refs_1 = require("./utils/compose-refs");
 const styles_1 = __importDefault(require("./styles"));
 const AnimatedKeyboardAvoidingView = react_native_1.Animated.createAnimatedComponent(react_native_1.KeyboardAvoidingView);
+
+//Patching code for web
+if (!react_native_1.Animated.FlatList) {
+    react_native_1.Animated.FlatList = react_native_1.Animated.createAnimatedComponent(
+        react_native_1.FlatList, { scrollEventThrottle: 0.0001 }
+    )
+}
+if (!react_native_1.Animated.SectionList) {
+    react_native_1.Animated.SectionList = react_native_1.Animated.createAnimatedComponent(
+        react_native_1.SectionList, { scrollEventThrottle: 0.0001 }
+    )
+}
 /**
  * When scrolling, it happens than beginScrollYValue is not always equal to 0 (top of the ScrollView).
  * Since we use this to trigger the swipe down gesture animation, we allow a small threshold to
@@ -77,7 +90,7 @@ withReactModal = false, withHandle = true, withOverlay = true,
 // Additional components
 HeaderComponent, FooterComponent, FloatingComponent, 
 // Callbacks
-onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOverlayPress, onLayout, }, ref) => {
+onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOverlayPress, onLayout, onPullToRefresh }, ref) => {
     const { height: screenHeight } = use_dimensions_1.useDimensions();
     const isHandleOutside = handlePosition === 'outside';
     const handleHeight = withHandle ? 20 : isHandleOutside ? 35 : 20;
@@ -455,6 +468,7 @@ onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOver
             handleClose(dest);
         }
     };
+
     const handleGestureEvent = react_native_1.Animated.event([{ nativeEvent: { translationY: dragY } }], {
         useNativeDriver: USE_NATIVE_DRIVER,
         listener: ({ nativeEvent: { translationY } }) => {
@@ -466,6 +480,13 @@ onOpen, onOpened, onClose, onClosed, onBackButtonPress, onPositionChange, onOver
                 let value;
                 if (modalPosition === 'initial' && translationY > 0) {
                     value = 0;
+                    if (y < 0.7 && !pulled) {
+                        pulled = true
+                        onPullToRefresh && onPullToRefresh()
+                    }
+                    if (y > 0.7 && pulled) {
+                        pulled = false
+                    }
                 }
                 else if (modalPosition === 'top' && translationY <= 0) {
                     value = 1;
diff --git a/node_modules/react-native-modalize/lib/options.d.ts b/node_modules/react-native-modalize/lib/options.d.ts
index b66d93d..e9e6b63 100644
--- a/node_modules/react-native-modalize/lib/options.d.ts
+++ b/node_modules/react-native-modalize/lib/options.d.ts
@@ -246,6 +246,7 @@ export interface IProps<ListItem = any> {
     onLayout?(nativeEvent: {
         layout: LayoutRectangle;
     }): void;
+    onPullToRefresh?(): void
 }
 export interface IHandles {
     /**
